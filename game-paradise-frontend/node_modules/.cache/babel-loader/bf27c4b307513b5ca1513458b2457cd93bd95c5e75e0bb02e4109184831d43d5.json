{"ast":null,"code":"// Simulación de API - En producción conectarías con tu backend real\nconst API_URL = 'http://localhost:3001/api'; // Cambiar por tu URL real\n\n// Datos simulados\nconst mockUsers = [{\n  _id: 'user1',\n  nombre_usuario: 'juanperez',\n  correo: 'juan@email.com',\n  contrasenia: btoa('password123'),\n  // NO usar en producción - usar bcrypt\n  sexo: 'Masculino',\n  rol: 'cliente',\n  telefono: '8112345678',\n  cart: 'cart1',\n  juegosPublicados: [],\n  comment: [],\n  rating: [],\n  order: []\n}];\nconst mockCarts = [{\n  _id: 'cart1',\n  user: 'user1',\n  items: [],\n  total: 0,\n  createdAt: new Date(),\n  updatedAt: new Date()\n}];\nexport const authService = {\n  async login(email, password) {\n    // Simular delay de red\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const user = mockUsers.find(u => u.correo === email);\n    if (!user) {\n      throw new Error('Usuario no encontrado');\n    }\n\n    // En producción, esto sería una comparación de hash\n    if (btoa(password) !== user.contrasenia) {\n      throw new Error('Contraseña incorrecta');\n    }\n    return user;\n  },\n  async register(userData) {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Verificar si el usuario ya existe\n    if (mockUsers.find(u => u.correo === userData.correo)) {\n      throw new Error('El correo ya está registrado');\n    }\n    if (mockUsers.find(u => u.nombre_usuario === userData.nombre_usuario)) {\n      throw new Error('El nombre de usuario ya existe');\n    }\n    const newUser = {\n      _id: `user${mockUsers.length + 1}`,\n      ...userData,\n      contrasenia: btoa(userData.contrasenia),\n      rol: 'cliente',\n      cart: `cart${mockCarts.length + 1}`,\n      juegosPublicados: [],\n      comment: [],\n      rating: [],\n      order: []\n    };\n    const newCart = {\n      _id: `cart${mockCarts.length + 1}`,\n      user: newUser._id,\n      items: [],\n      total: 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    mockUsers.push(newUser);\n    mockCarts.push(newCart);\n    return newUser;\n  },\n  async updateProfile(userId, userData) {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const userIndex = mockUsers.findIndex(u => u._id === userId);\n    if (userIndex === -1) {\n      throw new Error('Usuario no encontrado');\n    }\n    mockUsers[userIndex] = {\n      ...mockUsers[userIndex],\n      ...userData\n    };\n    return mockUsers[userIndex];\n  }\n};","map":{"version":3,"names":["API_URL","mockUsers","_id","nombre_usuario","correo","contrasenia","btoa","sexo","rol","telefono","cart","juegosPublicados","comment","rating","order","mockCarts","user","items","total","createdAt","Date","updatedAt","authService","login","email","password","Promise","resolve","setTimeout","find","u","Error","register","userData","newUser","length","newCart","push","updateProfile","userId","userIndex","findIndex"],"sources":["A:/xampp/htdocs/game-paradise-frontend/src/services/authService.js"],"sourcesContent":["// Simulación de API - En producción conectarías con tu backend real\r\nconst API_URL = 'http://localhost:3001/api'; // Cambiar por tu URL real\r\n\r\n// Datos simulados\r\nconst mockUsers = [\r\n  {\r\n    _id: 'user1',\r\n    nombre_usuario: 'juanperez',\r\n    correo: 'juan@email.com',\r\n    contrasenia: btoa('password123'), // NO usar en producción - usar bcrypt\r\n    sexo: 'Masculino',\r\n    rol: 'cliente',\r\n    telefono: '8112345678',\r\n    cart: 'cart1',\r\n    juegosPublicados: [],\r\n    comment: [],\r\n    rating: [],\r\n    order: []\r\n  }\r\n];\r\n\r\nconst mockCarts = [\r\n  {\r\n    _id: 'cart1',\r\n    user: 'user1',\r\n    items: [],\r\n    total: 0,\r\n    createdAt: new Date(),\r\n    updatedAt: new Date()\r\n  }\r\n];\r\n\r\nexport const authService = {\r\n  async login(email, password) {\r\n    // Simular delay de red\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    const user = mockUsers.find(u => u.correo === email);\r\n    if (!user) {\r\n      throw new Error('Usuario no encontrado');\r\n    }\r\n\r\n    // En producción, esto sería una comparación de hash\r\n    if (btoa(password) !== user.contrasenia) {\r\n      throw new Error('Contraseña incorrecta');\r\n    }\r\n\r\n    return user;\r\n  },\r\n\r\n  async register(userData) {\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    // Verificar si el usuario ya existe\r\n    if (mockUsers.find(u => u.correo === userData.correo)) {\r\n      throw new Error('El correo ya está registrado');\r\n    }\r\n\r\n    if (mockUsers.find(u => u.nombre_usuario === userData.nombre_usuario)) {\r\n      throw new Error('El nombre de usuario ya existe');\r\n    }\r\n\r\n    const newUser = {\r\n      _id: `user${mockUsers.length + 1}`,\r\n      ...userData,\r\n      contrasenia: btoa(userData.contrasenia),\r\n      rol: 'cliente',\r\n      cart: `cart${mockCarts.length + 1}`,\r\n      juegosPublicados: [],\r\n      comment: [],\r\n      rating: [],\r\n      order: []\r\n    };\r\n\r\n    const newCart = {\r\n      _id: `cart${mockCarts.length + 1}`,\r\n      user: newUser._id,\r\n      items: [],\r\n      total: 0,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date()\r\n    };\r\n\r\n    mockUsers.push(newUser);\r\n    mockCarts.push(newCart);\r\n\r\n    return newUser;\r\n  },\r\n\r\n  async updateProfile(userId, userData) {\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    const userIndex = mockUsers.findIndex(u => u._id === userId);\r\n    if (userIndex === -1) {\r\n      throw new Error('Usuario no encontrado');\r\n    }\r\n\r\n    mockUsers[userIndex] = { ...mockUsers[userIndex], ...userData };\r\n    return mockUsers[userIndex];\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}